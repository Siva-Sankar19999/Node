->require function is to include file/module into another file/module. 

->A module is like a file or piece of code which is to private to itself. To expose it's variable or functions we have to 
  module.exports and requuire ini common js module system.

->Suppose if we include a module into another module(just using with require function only) and once after that 
  included module executed, it will not be accessible to current module, as module protects their variables, functions
  from data leaking.

->To access that variables and functions from included module we need to export and import like below
  module.exports = {calculate:calculate};
  const obj = require('./file.js');

->Above module pattern is called commonjs module(cjs) and it is default in node.

->To use ES module system while executing things in node environment,
  we need to use package.json and type = "module" for ESM 
  and type = "commonjs" for CJS (optional)

->❌need to write some notes regarding .mjs thing as no need to write module in package.json
  and while executing we need to write .mjs while executing.

  need to check in regular javascript also when importing module what is happening.


->what is module.exports ? 
  module.exports is an empty object and we can export like below also

  /*
   * module.exports.x = 65;
   * module.exports.addFunction = addFunction;
   *
   */

->✅Suppose in a folder there are bunch of files exporting some functionalities(fucntions,variables) and we will use index.js file 
  to aggregate all the exports from multiple files. 
    project/
    ├── utils/
    │   ├── add.js
    │   ├── subtract.js
    │   ├── multiply.js
    │   ├── divide.js
    │   └── index.js  <-- Aggregator file
    └── app.js

->In Aggregator file, we import it and export it. 
    



