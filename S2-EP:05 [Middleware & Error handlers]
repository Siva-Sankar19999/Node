⚠️Middlewares & Error Handlers(Important concept)

->app.use("/test",(req,res)=>{ 
        // no res.send method is used.
        });
  In above, if we don't provide any res.send("some string"). The request keeps on going and it will hang.

->A route can have two/multiple route handlers and it should call next() to get next route handler.
  and in first route handler if it has res.send() method..response will go to the client and 
  in second route handler if it has again res.send() method..we will see error in the application as TCP connection
  is done after the response sent by first route handler.

  ✅ And res.send doesnot work like return statement. and after res.send() method, we can write code and node will execute it.
  // route routeHandlers callbacks
  app.use("/test",(req,res,next)=>{
      console.log("Firt route response..!);
      res.send("Firt route response");     // check this line as response will be sent
      next();
    },(req,res)=>{
      console.log("Second Route response..!");
      res.send("Second Route response");
    })

->one more way of writing multiple routeHandlers
  app.get("/test",(req,res,next)=>{
      console.log("first route console");
      next();
   });

   app.get("/test",(req,res)=>{
       console.log("second route console");
       res.send("Second route response);
     });

->In above, if we place again we place next() method in second route, we will get cannot get /test
  error as the request is still passing for next route and that route is not there.

->Middleware
  Middleware refers to functions that sit in middle of request-response cycle.
  and It can execute any code, can modify req or response or can end the req-response cycle or call
  next() to move on to the next middleware.
  Type of Middleware -
  <->Application level -  Applied to all routes using app.use()
     Route-level: Applied to specific routes
     Error-handling: Catches and handles errors (uses 4 parameters: err, req, res, next)
     Third party: CORS, Morgan, helmet.

->✅How ExpressJS server handle the requests ? means how routes execution when requests come?
  Express keep the functions/middleware/routes in a list from top to bottom. And if a request comes in then 
  express server go through the list from top to bottom and if anything matches it goes through until response send.


->Why on earth we need a middleware?
  Suppose some api's like admin/getData, admin/deleteData, admin/postData 
  for all above special routes we need to check the authorization of that person and we need to write some logic to validate the 
  user and instead of writing for every route. we use middleware concept.

->42 min




  
     





  
  



