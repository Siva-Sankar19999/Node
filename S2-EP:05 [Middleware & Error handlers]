⚠️Middlewares & Error Handlers(Important concept)

->app.use("/test",(req,res)=>{ 
        // no res.send method is used.
        });
  In above, if we don't provide any res.send("some string"). The request keeps on going and it will hang.

->A route can have two/multiple route handlers and it should call next() to get next route handler.
  and in first route handler if it has res.send() method..response will go to the client and 
  in second route handler if it has again res.send() method..we will see error in the application as TCP connection
  is done after the response sent by first route handler.

  ✅ And res.send doesnot work like return statement. and after res.send() method, we can write code and node will execute it.
  // route routeHandlers callbacks
  app.use("/test",(req,res,next)=>{
      console.log("Firt route response..!);
      res.send("Firt route response");     // check this line as response will be sent
      next();
    },(req,res)=>{
      console.log("Second Route response..!");
      res.send("Second Route response");
    })

->✅⚠️Once a request enters into a route, it should have either res.send() or next(), otherwise it will go on hang mode even other 
     matching routes are there in bottom.

->one more way of writing multiple routeHandlers
  app.get("/test",(req,res,next)=>{
      console.log("first route console");
      next();
   });

   app.get("/test",(req,res)=>{
       console.log("second route console");
       res.send("Second route response);
     });

->In above, if we place again we place next() method in second route, we will get cannot get /test
  error as the request is still passing for next route and that route is not there.


->✅How ExpressJS server handle the requests ? means how routes execution when requests come?
  Express keep the functions/middleware/routes in a list from top to bottom. And if a request comes in then 
  express server go through the list from top to bottom and if anything matches it goes through until response send.


->H/W we can use app.use and app.all for handling all the HTTP methods ?


->Why on earth we need a middleware?
  Suppose some api's like admin/getData, admin/deleteData, admin/postData 
  for all above special routes we need to check the authorization of that person and we need to write some logic to validate the 
  user and instead of writing for every route. we use middleware concept.


->Middleware
  Middleware refers to functions that sit in middle of request-response cycle.
  and It can execute any code, can modify req or response or can end the req-response cycle or call
  next() to move on to the next middleware.
  Type of Middleware -
  <->Application level -  Applied to all routes using app.use()
     Route-level: Applied to specific routes
     Error-handling: Catches and handles errors (uses 4 parameters: err, req, res, next)
     Third party: CORS, Morgan, helmet.

->✅For route pattern "/"            -> app.use will match or overide all the route patterns
                                      app.get will "/" pattern only.

  For Route pattern "/admin"       -> app.use will match /admin, /admin/anything, admin/anything/anything, admin/etc...
                                      app.get will match /admin pattern only.

->Middleware route example for admin
  app.use("/admin",callback);

  callback:
  const authAdmin = (req,res,next)=>{
     const token = "xyz";
     if(token == "xyz"){
        next();
     }
     res.status("401").send("Unauthorized");
  }

  app.get("/admin/getData",(req,res)=>{
      res.send("Fetched all the Admin Data");
  });

  app.delete("/admin/deleteData",(req,res)=>{
      res.send("Admin Data deleted successfully.. ")
  });


->Error Middleware
  If there is any error in the route/middleware(in case of sync error) -> express automatically catches it without try/catch 
  and pass it to error middleware(app.use("/",callback))..and it skips the matching routes in top-to-bottom matching routes.

  app.get("/test",(req,res)=>{
     if(false){
        res.send("Test Data fetched..!");
     }
     throw new Error("Something went wrong..!");
  });

  ✅/* Even though it is matching route, But express forward it to error middleware only and skips matching routes */
  app.use("/",(req,res)=>{
    res.send("USE Route..!");
  });

  app.use("/",(err,req,res,next)=>{
    res.status(500).send("Error caught successfully");
  });


->Unhandled async errors (Error Middleware)
  ⚠️Async errors will crash your appliaction or request will be in hanged state.
  Express won't catch the errors in the async functions like async/await, promises, callbacks and will not pass it to
  error middleware.
  we need to handle safely and call ✅next() method for handling over to error middleware

  /* Handling errors occured in async function */
  // Raising error in async functions
  app.get("/test",(req,res,next)=>{
      Promise.reject(new Error("something wrong happend..!");)
      .then()
      .catch(next);
  });

  // Error Middleware 
  app.use((err,req,res,next)=>{
     res.status(500).send("Server Error);
  });

