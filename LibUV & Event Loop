->As we know, Async tasks are offloaded to libUV

->performing Asynchronus I/O and non-blocking I/O is possible because of LibUV

->suppose for example a file read opeartion is there and it is deletegated to LibUV and once 
  it is done and it is the responsibility of LibUV to return the calllback to main execution context.

->if all the async tasks are completed at one time and these callbacks are maintained in their corresponding
  callback queques and event loop continously check the main execution context if it is free or not and if it 
  is free, event loop pull the callback from the callback queque and give to main execution content.

->Event Loop
  It continously checks the callstack, whethere it is free or not. If it is free it pull the asyn callback(completed one) and present
  in callback queue and give it to call-stack for execution.


->Pulling which callback is also important and it has priority and Event loop has four phases (Giving priority)
  Timer(setTimeout,setInterval) -> Pool(I/O operations) -> Check(setImmediate) -> Close(socket close)
  Like callbacks corresponding to Timer will execute first and Pool and so on

->And Event loop has inner phase [ Process.next -> promise callbacks ] before running every phase,
  first it will complete inner phase.Means like Before running every phase, it will check callbacks of Process.next and Promises.

->If the main-thread is free and callback queue is alos free as all the callback are executed. Thenn event loop waits at
  âœ…pool phase(*)




 

