->What is Node.js?
  1.Node.js is an open-source, 
      cross-platform & JavaScript runtime environment 
        that allows developers to execute JavaScript code outside a web browser (Linux,unix,windows,macos and embedded systems etc).
  2.Built on Chrome’s V8 JavaScript engine.
  3.It enables server-side scripting for building scalable, high-performance network applications.
  4.Node.js uses an event-driven, 
      non-blocking I/O model, 
        making it lightweight and efficient for data-intensive real-time applications.


->Key Features of Node.js?
  1.Asynchronous & Non-Blocking I/O -
    It handles requests asynchronously without blocking for one request. Like input/output operations (e.g., file access, network requests) are initiated 
    without halting the main execution thread. Instead of waiting for a task to finish, the system delegates the work to background processes 
    and responds later via callbacks, promises, or events once the operation completes.

  2.Event Driven Architecture -
    The flow of a program is determined by events (e.g., user requests, file I/O completion, timers). 
    Instead of following a linear sequence, the program uses callbacks (functions) to react to events as they occur, enabling asynchronous, non-blocking behavior.
    How It Works in Node.js-
    Event Emitters:
      Objects (like servers, streams, or timers) emit events (e.g., request, data, error).
    Event Listeners (Callbacks):
      Functions registered, to respond to specific events. For example:
          /**
            server.on('request', (req, res) => {  
              res.end('Hello World!');  
            }); 
          **/
      Here, the request event triggers the callback.
    Event Loop:
      A loop that continuously checks for events in a queue and executes their callbacks when the main thread is free.

  3.Built on Chrome’s V8 Engine
    Uses Google’s V8 engine to compile JavaScript directly to machine code for fast execution.

  4.NPM (Node Package Manager)
    Accelerates development by integrating pre-built tools (e.g., Express.js for servers, Mongoose for databases).

  5.Cross-Platform Compatibility
    Runs seamlessly on Windows, macOS, Linux, and cloud platforms.

  6.Real-Time Communication Support
    Definition: Native support for WebSockets and event-based libraries (e.g., Socket.IO) for bidirectional client-server communication.
    Why It Matters: Powers real-time apps like gaming, live chats, and collaboration tools.

  7.Scalability
    Definition: Designed for horizontal scaling (adding more machines) and vertical scaling (optimizing resources on a single machine).
    Why It Matters: Ideal for microservices architectures and apps requiring high concurrency (e.g., APIs, e-commerce)

  8.Streaming Data Support
    Definition: Processes large datasets (e.g., video files) in chunks (streams) instead of loading entire files into memory.
    Why It Matters: Reduces memory usage and enables real-time data processing (e.g., uploading files while encoding)

  9.Single-Threaded Event Loop
    Definition: A single main thread handles all requests via an event loop, which processes callbacks from a queue.
    Why It Matters: Avoids the overhead of thread creation/context switching, enabling scalability with minimal resources.




  
    
    
 

  
  


 
  
  
